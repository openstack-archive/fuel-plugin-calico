#!/usr/bin/env python

import pyinotify
import subprocess
import yaml

from pluginutils import NODES_CONFIG

RECONFIGURE_ROUTE_REFLECTOR = "##REPLACE_ON_INSTALL##/calico_route_reflector.sh"


def _get_configured_nodes():
    with open(NODES_CONFIG, "r") as f:
        config = yaml.safe_load(f)

    nodes = [node for node in config["nodes"] if node["role"] in [
                               "compute", "controller", "primary-controller"]]

    # There is no need to reconfigure the route reflector for a change in
    # primary controller, so we don't keep track of which controller is the
    # current primary.
    primary_controller_index = None
    for (index, node) in enumerate(nodes):
        if node["role"] == "primary-controller":
            primary_controller_index = index
            break

    # Note the index could be 0 - hence 'if x is not None' rather than 'if x'
    if primary_controller_index is not None:
        nodes[primary_controller_index]["role"] = "controller"

    return nodes


class DeploymentChangeHandler(pyinotify.ProcessEvent):
    def __init__(self):
        super(DeploymentChangeHandler, self).__init__()
        self.nodes = _get_configured_nodes()

    def process_IN_MODIFY(self, event):
        current_nodes = _get_configured_nodes()
        if current_nodes != self.nodes:
            subprocess.call(RECONFIGURE_ROUTE_REFLECTOR)
            self.nodes = current_nodes


if __name__ == "__main__":
    handler = DeploymentChangeHandler()
    watch_manager = pyinotify.WatchManager()
    notifier = pyinotify.Notifier(watch_manager, handler)
    watch_manager.add_watch(NODES_CONFIG, pyinotify.IN_MODIFY)
    notifier.loop()

